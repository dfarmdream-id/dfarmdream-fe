name: CI

on:
  push:
    branches:
      - main

env:
  CR: ${{ secrets.CR }}
  CR_PAT: ${{ secrets.CR_PAT }}
  CR_USER: ${{ secrets.CR_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
  SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
  SSH_USER: ${{ secrets.STAGING_SSH_USER }}
  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.STAGING_NEXT_PUBLIC_API_BASE_URL }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          CR_LOWER=$(echo "${{env.CR}}" | tr '[:upper:]' '[:lower:]')
          USERNAME_LOWER=$(echo "${{github.repository_owner}}" | tr '[:upper:]' '[:lower:]')
          PROJECTNAME_LOWER=$(echo "${{github.event.repository.name}}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="$CR_LOWER/$USERNAME_LOWER/$PROJECTNAME_LOWER:$GITHUB_SHA"
          echo "IMAGE_NAME=$IMAGE_NAME" > IMAGE_NAME.txt
          echo "IMAGE_NAME=$IMAGE_NAME" >> ${GITHUB_ENV}
          echo "PROJECTNAME_LOWER=$PROJECTNAME_LOWER" >> ${GITHUB_ENV}
          echo "IMAGE_NAME_WITHOUT_SHA=$CR_LOWER/$USERNAME_LOWER/$PROJECTNAME_LOWER" >> ${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{env.CR}}
          username: ${{env.CR_USER}}
          password: ${{ env.CR_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{env.IMAGE_NAME}}
          cache-from: type=gha
          cache-to: type=gha,mode=max`
          build-args: |
            NEXT_PUBLIC_API_BASE_URL=${{env.NEXT_PUBLIC_API_BASE_URL}}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: image-name
          path: IMAGE_NAME.txt

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: image-name

      - name: Prepare
        run: |
          CR_LOWER=$(echo "${{env.CR}}" | tr '[:upper:]' '[:lower:]')
          USERNAME_LOWER=$(echo "${{github.repository_owner}}" | tr '[:upper:]' '[:lower:]')
          PROJECTNAME_LOWER=$(echo "${{github.event.repository.name}}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="$CR_LOWER/$USERNAME_LOWER/$PROJECTNAME_LOWER:$GITHUB_SHA"
          echo "IMAGE_NAME=$IMAGE_NAME" > IMAGE_NAME.txt
          echo "IMAGE_NAME=$IMAGE_NAME" >> ${GITHUB_ENV}
          echo "PROJECTNAME_LOWER=$PROJECTNAME_LOWER" >> ${GITHUB_ENV}
          echo "IMAGE_NAME_WITHOUT_SHA=$CR_LOWER/$USERNAME_LOWER/$PROJECTNAME_LOWER" >> ${GITHUB_ENV}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - name: Deploy Docker image
        run: |
          source IMAGE_NAME.txt
          echo "Using Docker image $IMAGE_NAME"
          ssh ${{env.SSH_USER}}@${{env.SSH_HOST}} -o StrictHostKeyChecking=no "echo ${{env.CR_PAT}} | docker login ${{env.CR}} -u ${{env.CR_USER}} --password-stdin"
          ssh $SSH_USER@$SSH_HOST -o StrictHostKeyChecking=no "docker pull ${{env.IMAGE_NAME}} || true"
          PROJECTNAME_LOWER=$(echo "${{github.event.repository.name}}" | tr '[:upper:]' '[:lower:]')
          ssh $SSH_USER@$SSH_HOST -o StrictHostKeyChecking=no "docker rm -f $PROJECTNAME_LOWER || true"
          ssh $SSH_USER@$SSH_HOST -o StrictHostKeyChecking=no "docker run -d -p 3000:3000 --name=${{env.PROJECTNAME_LOWER}} -e NEXT_PUBLIC_API_BASE_URL='${{env.NEXT_PUBLIC_API_BASE_URL}}' ${{env.IMAGE_NAME}} || true"